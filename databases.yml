version: '3.8'

x-adminer-labels: &adminer-labels
  labels:
    - traefik.enable=true
    - traefik.docker.network=database
    - traefik.http.routers.adminer-http.rule=Host(`adminer.${ADMIN_SUB_DOMAIN}${DOMAIN?Variable not set}`)
    - traefik.http.routers.adminer-http.entrypoints=http
    #- traefik.http.routers.adminer-http.middlewares=admin-auth
    - traefik.http.routers.adminer-http.service=adminer
    - traefik.http.routers.adminer-http.middlewares=https-redirect
    - traefik.http.routers.adminer-https.rule=Host(`adminer.${ADMIN_SUB_DOMAIN}${DOMAIN?Variable not set}`)
    - traefik.http.routers.adminer-https.entrypoints=https
    - traefik.http.routers.adminer-https.middlewares=admin-auth
    - traefik.http.routers.adminer-https.tls=true
    - traefik.http.routers.adminer-https.service=adminer
    - traefik.http.routers.adminer-https.tls.certresolver=le
    - traefik.http.services.adminer.loadbalancer.server.port=8080

x-influxdb-labels: &influxdb-labels
  labels:
    - traefik.enable=true
    - traefik.docker.network=monitoring
    - traefik.http.routers.influxdb-http.rule=Host(`influxdb.${ADMIN_SUB_DOMAIN}${DOMAIN?Variable not set}`)
    - traefik.http.routers.influxdb-http.entrypoints=http
    #- traefik.http.routers.influxdb-http.middlewares=admin-auth
    - traefik.http.routers.influxdb-http.service=influxdb
    - traefik.http.routers.influxdb-http.middlewares=https-redirect
    - traefik.http.routers.influxdb-https.rule=Host(`influxdb.${ADMIN_SUB_DOMAIN}${DOMAIN?Variable not set}`)
    - traefik.http.routers.influxdb-https.entrypoints=https
    #- traefik.http.routers.influxdb-https.middlewares=admin-auth
    - traefik.http.routers.influxdb-https.tls=true
    - traefik.http.routers.influxdb-https.service=influxdb
    - traefik.http.routers.influxdb-https.tls.certresolver=le
    - traefik.http.services.influxdb.loadbalancer.server.port=8086

x-service: &service
  logging:
    driver: json-file
    options:
      max-size: "100m"
      max-file: "2"
  restart: always
  networks:
    - database

x-service-deploy: &service-deploy
  mode: replicated
  replicas: 1
  placement:
    constraints:
      - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}

services:
  # https://hub.docker.com/_/adminer
  adminer:
    container_name: adminer
    image: adminer
    deploy:
      <<: *service-deploy
      <<: *adminer-labels
      placement: {}
      resources:
        reservations:
          cpus: '0.01'
          memory: 50M
    <<: *adminer-labels
    <<: *service

  # https://github.com/docker-library/docs/blob/master/postgres/README.md
  postgres:
    container_name: postgres
    image: postgres:14
    deploy:
      <<: *service-deploy
      resources:
        reservations:
          cpus: '0.01'
          memory: 50M
    <<: *service
    environment:
      POSTGRES_PASSWORD: ${SQL_ROOT_PASSWORD?Variable SQL_ROOT_PASSWORD not set}
      PGDATA: "/var/lib/postgresql/data"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-entrypoint:/docker-entrypoint-initdb.d
      
  # https://hub.docker.com/_/influxdb
  # https://docs.influxdata.com/influxdb/v2.1/install/?t=Docker
  # https://docs.influxdata.com/influxdb/v2.1/reference/config-options/
  # https://github.com/influxdata/community-templates/blob/master/docs/use_a_template.md
  influxdb:
    container_name: influxdb
    image: influxdb:2.4
    deploy:
      mode: replicated
      replicas: 1
      resources:
        reservations:
          cpus: '0.10'
          memory: 250M
      placement:
        constraints:
          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}
      <<: *influxdb-labels
    <<: *influxdb-labels
    <<: *service
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-entrypoint:/docker-entrypoint-initdb.d
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${USERNAME?Variable USERNAME not set}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${PASSWORD?Variable PASSWORD not set}
      DOCKER_INFLUXDB_INIT_ORG: ${DOMAIN?Variable DOMAIN not set}
      DOCKER_INFLUXDB_INIT_BUCKET: telegraf
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}
    user: root

x-volume: &volume
  driver: local
x-volume-driver-opts: &volume-driver-opts
  type: none
  o: bind

volumes:
  postgres-data:
    name: postgres-data
    <<: *volume
    driver_opts:
      <<: *volume-driver-opts
      device: ${DATAPATH?Variable DATAPATH not set}/postgres/data
  postgres-entrypoint:
    name: postgres-entrypoint
    <<: *volume
    driver_opts:
      <<: *volume-driver-opts
      device: ${DATAPATH?Variable DATAPATH not set}/postgres/entrypoint


networks:
  database:
    name: database
    external: true
